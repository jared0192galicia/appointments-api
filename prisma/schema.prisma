generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int          @id @default(autoincrement())
  email     String?      @unique
  phone     String?
  name      String?
  surName   String?
  password  String
  meta      Json?        @db.JsonB
  createdAt DateTime     @default(now()) @map("created_at")
  active    Boolean      @default(true)

  roleId    Int          @default(3)
  role      Role         @relation(fields: [roleId], references: [id])

  appointments Appointment[]
}

model Role {
  id        Int       @id @default(autoincrement())
  name      String    @unique // ADMIN, EMPLOYEE, CLIENT
  createdAt DateTime  @default(now()) @map("created_at")

  users     User[]
}

model Branch {
  id        Int       @id @default(autoincrement())
  name      String
  address   String
  mapUrl    String?   // URL a Google Maps o similar
  createdAt DateTime  @default(now()) @map("created_at")
  isActive  Boolean   @default(true)

  resources Resource[]
  appointments Appointment[]
}

model Resource {
  id        Int         @id @default(autoincrement())
  name      String
  bio       String?     // breve biograf√≠a del profesional
  photoUrl  String?     // URL a la foto del profesional
  type      String?     // Ej: "Doctor", "Sala", "Equipo"
  meta      Json?       @db.JsonB
  isActive  Boolean     @default(true)
  createdAt DateTime    @default(now()) @map("created_at")

  branchId  Int
  branch    Branch      @relation(fields: [branchId], references: [id])

  appointments Appointment[]
}

model Service {
  id        Int         @id @default(autoincrement())
  name      String
  description String?
  durationMinutes Int
  price     Float?
  meta      Json?       @db.JsonB
  createdAt DateTime    @default(now()) @map("created_at")

  appointments Appointment[]
}

model Appointment {
  id         Int            @id @default(autoincrement())
  userId     Int
  user       User           @relation(fields: [userId], references: [id])

  branchId   Int
  branch     Branch         @relation(fields: [branchId], references: [id])

  resourceId Int?           // Profesional es opcional
  resource   Resource?      @relation(fields: [resourceId], references: [id])

  serviceId  Int
  service    Service        @relation(fields: [serviceId], references: [id])

  statusId   Int
  status     AppointmentStatus @relation(fields: [statusId], references: [id])

  startsAt   DateTime       @map("starts_at")
  endsAt     DateTime       @map("ends_at")

  metadata   Json?          @db.JsonB
  clientNote String?        @db.VarChar(500) // Observaciones del cliente
  notes      String?        // Notas internas
  createdAt  DateTime       @default(now()) @map("created_at")
  updatedAt  DateTime       @default(now()) @map("updated_at")
}

model AppointmentStatus {
  id        Int       @id @default(autoincrement())
  name      String    @unique // SCHEDULED, CONFIRMED, CANCELLED, COMPLETED
  createdAt DateTime  @default(now()) @map("created_at")

  appointments Appointment[]
}

model Settings {
  id            Int      @id @default(autoincrement())
  businessName  String?
  workDays      Json?    @db.JsonB // ej: { "monday": true, "tuesday": false }
  workHours     Json?    @db.JsonB // ej: { "start": "08:00", "end": "18:00" }
  reminderEmail Boolean  @default(true)
  reminderWhats Boolean  @default(false)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @map("updated_at")
}
