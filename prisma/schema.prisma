generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int           @id @default(autoincrement())
  email       String?       @unique
  phone       String?
  name        String?
  surName     String?
  password    String
  meta        Json?         @db.JsonB
  createdAt   DateTime      @default(now()) @map("created_at")
  active      Boolean       @default(true)

  roleId      Int           @default(3)
  role        Role          @relation(fields: [roleId], references: [id])

  appointments Appointment[]
}

model Role {
  id        Int       @id @default(autoincrement())
  name      String    @unique // ADMIN, EMPLOYEE, CLIENT
  createdAt DateTime  @default(now()) @map("created_at")

  users     User[]
}

model Branch {
  id          Int           @id @default(autoincrement())
  name        String
  address     String
  mapUrl      String?
  createdAt   DateTime      @default(now()) @map("created_at")
  isActive    Boolean       @default(true)

  resources   Resource[]
  appointments Appointment[]

  // ðŸ”— Servicios disponibles en esta sucursal
  branchServices BranchService[]
}

model Resource {
  id          Int         @id @default(autoincrement())
  name        String
  bio         String?
  photoUrl    String?
  type        String?
  meta        Json?       @db.JsonB
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now()) @map("created_at")

  branchId    Int
  branch      Branch      @relation(fields: [branchId], references: [id])

  appointments Appointment[]

  // ðŸ”— Servicios que este profesional o recurso puede ofrecer
  resourceServices ResourceService[]
}

model Service {
  id              Int           @id @default(autoincrement())
  name            String
  description     String?
  durationMinutes Int
  price           Float?
  meta            Json?         @db.JsonB
  createdAt       DateTime      @default(now()) @map("created_at")

  appointments    Appointment[]
  
  // ðŸ”— En quÃ© sucursales estÃ¡ disponible
  branchServices  BranchService[]
  
  // ðŸ”— QuÃ© recursos pueden ofrecerlo
  resourceServices ResourceService[]
}

model BranchService {
  id          Int       @id @default(autoincrement())
  branchId    Int
  serviceId   Int
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now()) @map("created_at")

  branch      Branch    @relation(fields: [branchId], references: [id])
  service     Service   @relation(fields: [serviceId], references: [id])

  @@unique([branchId, serviceId])
}

model ResourceService {
  id          Int       @id @default(autoincrement())
  resourceId  Int
  serviceId   Int
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now()) @map("created_at")

  resource    Resource  @relation(fields: [resourceId], references: [id])
  service     Service   @relation(fields: [serviceId], references: [id])

  @@unique([resourceId, serviceId])
}

model Appointment {
  id          Int            @id @default(autoincrement())
  userId      Int
  user        User           @relation(fields: [userId], references: [id])

  branchId    Int
  branch      Branch         @relation(fields: [branchId], references: [id])

  resourceId  Int?
  resource    Resource?      @relation(fields: [resourceId], references: [id])

  serviceId   Int
  service     Service        @relation(fields: [serviceId], references: [id])

  statusId    Int
  status      AppointmentStatus @relation(fields: [statusId], references: [id])

  startsAt    DateTime       @map("starts_at")
  endsAt      DateTime       @map("ends_at")

  metadata    Json?          @db.JsonB
  clientNote  String?        @db.VarChar(500)
  notes       String?
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @default(now()) @map("updated_at")
}

model AppointmentStatus {
  id        Int       @id @default(autoincrement())
  name      String    @unique // SCHEDULED, CONFIRMED, CANCELLED, COMPLETED
  createdAt DateTime  @default(now()) @map("created_at")

  appointments Appointment[]
}

model Settings {
  id            Int      @id @default(autoincrement())
  businessName  String?
  workDays      Json?    @db.JsonB
  workHours     Json?    @db.JsonB
  reminderEmail Boolean  @default(true)
  reminderWhats Boolean  @default(false)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @map("updated_at")
}
